{"version":3,"sources":["components/navbar.js","components/Header/index.js","components/Container/index.js","components/Footer/index.js","components/CharImages/index.js","App.js","serviceWorker.js","index.js"],"names":["Nav","props","className","href","score","highScore","Header","id","Container","children","Footer","target","rel","CharImages","onClick","handleClick","alt","src","image","App","state","characters","resetGame","clicks","map","click","clicked","flipImages","i","length","j","Math","floor","random","k","rightPick","data","updatedScore","updatedHighScore","setState","wrongPick","correctGuess","newChar","character","newCharacter","this","key","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"iwEAsBeA,EApBH,SAAAC,GACR,OACI,yBAAKC,UAAU,gBACX,6BACI,yBAAKA,UAAU,wCACX,yBAAKA,UAAU,UACX,uBAAGC,KAAK,KAAR,2BAEJ,yBAAKD,UAAU,UACX,8DAEJ,yBAAKA,UAAU,UACX,wCAAcD,EAAMG,MAApB,kBAA0CH,EAAMI,gBCDzDC,G,MAVA,SAAAL,GAAK,OAChB,yBAAKM,GAAG,SAASL,UAAU,aACvB,yBAAKA,UAAU,OACX,8BACI,wBAAIK,GAAG,SAAP,yFCFDC,G,MAFG,SAAAP,GAAK,OAAI,6BAASC,UAAU,aAAaD,EAAMQ,YCUlDC,G,MAVA,SAAAT,GAAK,OAChB,4BAAQC,UAAU,oBACd,yBAAKA,UAAU,oBACX,yBAAKA,UAAU,2BACX,uBAAGA,UAAU,cAAb,sDAA0E,uBAAGA,UAAU,aAAaC,KAAK,2CAA2CQ,OAAO,SAASC,IAAI,uBAA9F,oBCM3EC,G,MAVI,SAAAZ,GACf,OACI,yBAAKC,UAAU,aAAaY,QAAS,kBAAMb,EAAMc,YAAYd,EAAMM,MAC/D,yBAAKL,UAAU,kEACX,yBAAKc,IAAI,aAAaC,IAAKhB,EAAMiB,MAAOhB,UAAU,qC,OC6FnDiB,G,kNA1FbC,MAAQ,CACNC,aACAjB,MAAO,EACPC,UAAW,G,EAObiB,UAAY,SAAAC,GACV,IAAMD,EAAYC,EAAOC,KAAI,SAAAC,GAAK,kCAAUA,GAAV,IAAiBC,SAAS,OAC5D,OAAO,EAAKC,WAAWL,I,EAGzBK,WAAa,SAAAN,GAEX,IADA,IAAIO,EAAIP,EAAWQ,OAAS,EACrBD,EAAI,GAAG,CACZ,IAAME,EAAIC,KAAKC,MAAMD,KAAKE,UAAYL,EAAI,IACpCM,EAAIb,EAAWO,GACrBP,EAAWO,GAAKP,EAAWS,GAC3BT,EAAWS,GAAKI,EAChBN,IAEF,OAAOP,G,EAGTc,UAAY,SAAAC,GAAS,IAAD,EACW,EAAKhB,MAA1Bf,EADU,EACVA,UACFgC,EAFY,EACCjC,MACU,EACvBkC,EAAmBD,EAAehC,EAAYgC,EAAehC,EACnE,EAAKkC,SAAS,CACZlB,WAAY,EAAKM,WAAWS,GAC5BhC,MAAOiC,EACPhC,UAAWiC,K,EAIfE,UAAY,SAAAJ,GACV,EAAKG,SAAS,CACZH,KAAM,EAAKd,UAAUc,GACrBhC,MAAO,K,EAIXW,YAAc,SAAAR,GACZ,IAAIkC,GAAe,EACbC,EAAU,EAAKtB,MAAMC,WAAWG,KAAI,SAAAmB,GACxC,IAAMC,EAAY,eAAQD,GAO1B,OANIC,EAAarC,KAAOA,IACjBqC,EAAalB,UAChBkB,EAAalB,SAAU,EACvBe,GAAe,IAGZG,KAETH,EAAe,EAAKN,UAAUO,GAAW,EAAKF,UAAUE,I,kEAlDxDG,KAAKN,SAAS,CAAElB,WAAYwB,KAAKlB,WAAWkB,KAAKzB,MAAMC,gB,+BAwD/C,IAAD,OACP,OACE,oCACE,kBAAC,EAAD,CAAKjB,MAAOyC,KAAKzB,MAAMhB,MAAOC,UAAWwC,KAAKzB,MAAMf,YAEpD,kBAAC,EAAD,MAEA,kBAAC,EAAD,KACGwC,KAAKzB,MAAMC,WAAWG,KAAI,SAAAmB,GAAS,OAClC,kBAAC,EAAD,CACEG,IAAKH,EAAUpC,GACfA,GAAIoC,EAAUpC,GACdQ,YAAa,EAAKA,YAClBG,MAAOyB,EAAUzB,YAKvB,kBAAC,EAAD,W,GAlFU6B,cCGEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.40adb723.chunk.js","sourcesContent":["import React from 'react';\n\nconst Nav = props => {\n    return (\n        <div className=\"navbar-fixed\">\n            <nav>\n                <div className=\"nav-wrapper row blue darken-4 center\">\n                    <div className=\"col s4\">\n                        <a href=\"/\">South Park Clicky Game</a>\n                    </div>\n                    <div className=\"col s4\">\n                        <span>Click a character to begin!</span>\n                    </div>\n                    <div className=\"col s4\">\n                        <span>Score: {props.score} | High Score: {props.highScore}</span>\n                    </div>\n                </div>\n            </nav>\n        </div>\n    );\n};\n\nexport default Nav;","import React from 'react';\nimport './header.css';\n\nconst Header = props => (\n    <div id=\"header\" className=\"container\">\n        <div className=\"col\">\n            <span>\n                <h4 id=\"rules\">Click on an image to earn points, but don't click on any of them more than once!</h4>\n            </span>\n        </div>\n    </div>\n)\n\nexport default Header;","import React from 'react';\nimport './container.css';\n\nconst Container = props => <section className=\"container\">{props.children}</section>;\n\nexport default Container;","import React from 'react';\nimport './footer.css';\n\nconst Footer = props => (\n    <footer className=\"footer-container\">\n        <div className=\"footer-copyright\">\n            <div className=\"container blue darken-4\">\n                <p className=\"white-text\">Â© 2020 Copyright Jared Silver. For project code <a className=\"white-text\" href=\"https://github.com/jsilver88/clicky-game\" target=\"_blank\" rel=\"noopener noreferrer\">Click here</a></p>\n            </div>\n        </div>\n    </footer>\n)\n\nexport default Footer;","import React from 'react';\nimport './charImages.css';\n\nconst CharImages = props => {\n    return (\n        <div className=\"charImages\" onClick={() => props.handleClick(props.id)}>\n            <div className=\"character-card card-image waves-effect waves-block waves-light\">\n                <img alt=\"South Park\" src={props.image} className=\"characters activator clicked\" />\n            </div>\n        </div>\n    );\n};\n\nexport default CharImages;","import React, { Component } from 'react';\nimport Nav from './components/navbar';\nimport Header from './components/Header';\nimport Container from './components/Container';\nimport Footer from './components/Footer';\nimport CharImages from './components/CharImages';\nimport characters from './characters.json';\nimport './App.css';\n\nclass App extends Component {\n  state = {\n    characters,\n    score: 0,\n    highScore: 0\n  };\n\n  componentDidMount() {\n    this.setState({ characters: this.flipImages(this.state.characters) });\n  }\n\n  resetGame = clicks => {\n    const resetGame = clicks.map(click => ({ ...click, clicked: false }));\n    return this.flipImages(resetGame);\n  }\n\n  flipImages = characters => {\n    let i = characters.length - 1;\n    while (i > 0) {\n      const j = Math.floor(Math.random() * (i + 1));\n      const k = characters[i];\n      characters[i] = characters[j];\n      characters[j] = k;\n      i--;\n    }\n    return characters;\n  };\n\n  rightPick = data => {\n    const { highScore, score } = this.state;\n    const updatedScore = score + 1;\n    const updatedHighScore = updatedScore > highScore ? updatedScore : highScore;\n    this.setState({\n      characters: this.flipImages(data),\n      score: updatedScore,\n      highScore: updatedHighScore\n    });\n  };\n\n  wrongPick = data => {\n    this.setState({\n      data: this.resetGame(data),\n      score: 0\n    });\n  };\n\n  handleClick = id => {\n    let correctGuess = false;\n    const newChar = this.state.characters.map(character => {\n      const newCharacter = { ...character };\n      if (newCharacter.id === id) {\n        if (!newCharacter.clicked) {\n          newCharacter.clicked = true;\n          correctGuess = true;\n        }\n      }\n      return newCharacter;\n    });\n    correctGuess ? this.rightPick(newChar) : this.wrongPick(newChar);\n  };\n\n\n\n\n  render() {\n    return (\n      <>\n        <Nav score={this.state.score} highScore={this.state.highScore} />\n\n        <Header />\n\n        <Container>\n          {this.state.characters.map(character => (\n            <CharImages\n              key={character.id}\n              id={character.id}\n              handleClick={this.handleClick}\n              image={character.image}\n            />\n          ))}\n        </Container>\n\n        <Footer />\n\n\n      </>\n    )\n  }\n\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}